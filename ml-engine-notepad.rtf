https://cloud.google.com/ml-engine/docs/tensorflow/training-jobs
https://cloud.google.com/ml-engine/docs/tensorflow/packaging-trainer

JOB_DIR = gs://research-storage/zero_to_one_train_20190204_201249

gcloud ml-engine jobs submit training $JOB_NAME --scale-tier basic --module-name "src.trainer" --package-path ./ --job-dir $JOB_DIR --region "us-west1"

Issues training locally? 
tensorflow/core/platform/cloud/retrying_utils.cc:77] The operation failed and will be automatically retried in 0.710664 seconds (attempt 1 out of 10), caused by: Unavailable: Error executing an HTTP request: libcurl code 6 meaning 'Couldn't resolve host name', error details: Couldn't resolve host 'metadata'

gcloud auth application-default login

# LOCAL TESTING PROCEDURE
python3 -m trainer.task --images ../../Dataset/V2.0_Processed --manifest ../../Dataset/V2.0_Processed/manifest.json --config config/default.yaml

# Cleaning up dataset directory

find ../../Research/Dataset/V3.0_Processed -type d | grep frames$ | xargs -L 1 python3 -m cropall

find . | grep .*/frames/frame.*.png | xargs rm

# Copying things down from GC
echo trial_a_ft_2_lr_4_seed_35_2019_04_01_16_30_51 | xargs -I{} bash -c "mkdir trial_a/{} && gsutil -m cp -R gs://research-storage/staging/{} trial_a/{}"

# Get the patient ID from the filename
validation_df['patient'] = validation_df['filename'].str.extract(r'gs://research-storage/V4.0_Processed/(?:Benign|Malignant)/(\w+)/', expand=False)  
validation_df['filename'] = validation_df['filename'].str.replace("gs://research-storage", "../../../../Dataset")
# Get the predictions mean from the groupby (uses scipy.stats) 
val_df.groupby(['patient']).agg({'class': lambda x: stats.mode(x)[0][0], 'predictions':'mean', 'rounded':'any'})

# Build a patient level DataFrame
from sklearn.metrics import roc_auc_score, accuracy_score, confusion_matrix
from scipy import stats

validation_df['patient'] = validation_df['filename'].str.extract(r'gs://research-storage/V4.0_Processed/(?:Benign|Malignant)/(\w+)/', expand=False)
validation_df['predictions'] = predictions_df['predictions']
validation_df['rounded_mean'] = validation_df['predictions'].round()
validation_df['rounded_any'] = validation_df['predictions'].round()

patient_df = validation_df.groupby(['patient']).agg({
    'class': lambda x: stats.mode(x)[0][0],
    'predictions':'mean',
    'rounded_mean':'mean',
    'rounded_any':'any'
    })

# Compute AUC score
auc_score = roc_auc_score(patient_df['class'].astype('category').cat.codes, patient_df['predictions'])
acc_score = accuracy_score(patient_df['class'].astype('category').cat.codes, patient_df['predictions'].round())

cm = confusion_matrix(patient_df['class'].astype('category').cat.codes, patient_df['predictions'].round())               
TP = cm[0][0]
FP = cm[0][1]
FN = cm[1][0]
TN = cm[1][1]
TPR = TP/(TP+FN) # Sensitivity, hit rate, recall
TNR = TN/(TN+FP) # Specificity or true negative rate
PPV = TP/(TP+FP) # Precision or positive predictive value
NPV = TN/(TN+FN) # Negative predictive value
FNR = FN/(TP+FN) # False negative rate


print("Accuracy: {0}".format(acc_score))
print("AUC: {0}".format(auc_score))
print("Sensitivity: {0}".format(TPR))
print("Specificity: {0}".format(TNR))
print("PPV: {0}".format(PPV))
print("NPV: {0}".format(NPV))
print("FNR: {0}".format(FNR))